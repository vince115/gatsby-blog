{"version":3,"file":"get-video-id.esm.min.js","sources":["../node_modules/get-src/index.js","../src/utils/strip-parameters.js","../src/youtube.js","../src/vimeo.js","../src/vine.js","../src/videopress.js","../src/microsoftstream.js","../src/index.js"],"sourcesContent":["'use strict';\nmodule.exports = function (input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError('get-src expected a string');\n\t}\n\tvar re = /src=\"(.*?)\"/gm;\n\tvar url = re.exec(input);\n\n\tif (url && url.length >= 2) {\n\t\treturn url[1];\n\t}\n};\n","/**\n * Strip away any parameters following `?` or `/` or '&'\n * @param str\n * @returns {String}\n */\nexport default function stripParameters(str) {\n  // Split parameters or split folder separator\n  if (str.indexOf('?') > -1) {\n    return str.split('?')[0];\n  } if (str.indexOf('/') > -1) {\n    return str.split('/')[0];\n  } if (str.indexOf('&') > -1) {\n    return str.split('&')[0];\n  }\n  return str;\n}\n","import stripParameters from './utils/strip-parameters';\n\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function youtube(youtubeStr) {\n  let str = youtubeStr;\n\n  // remove time hash at the end of the string\n  str = str.replace(/#t=.*$/, '');\n\n  // shortcode\n  const shortcode = /youtube:\\/\\/|https?:\\/\\/youtu\\.be\\/|http:\\/\\/y2u\\.be\\//g;\n\n  if (shortcode.test(str)) {\n    const shortcodeid = str.split(shortcode)[1];\n    return stripParameters(shortcodeid);\n  }\n\n  // /v/ or /vi/\n  const inlinev = /\\/v\\/|\\/vi\\//g;\n\n  if (inlinev.test(str)) {\n    const inlineid = str.split(inlinev)[1];\n    return stripParameters(inlineid);\n  }\n\n  // v= or vi=\n  const parameterv = /v=|vi=/g;\n\n  if (parameterv.test(str)) {\n    const arr = str.split(parameterv);\n    return stripParameters(arr[1].split('&')[0]);\n  }\n\n  // v= or vi=\n  const parameterwebp = /\\/an_webp\\//g;\n\n  if (parameterwebp.test(str)) {\n    const webp = str.split(parameterwebp)[1];\n    return stripParameters(webp);\n  }\n\n  // embed\n  const embedreg = /\\/embed\\//g;\n\n  if (embedreg.test(str)) {\n    const embedid = str.split(embedreg)[1];\n    return stripParameters(embedid);\n  }\n\n  // ignore /user/username pattern\n  const usernamereg = /\\/user\\/([a-zA-Z0-9]*)$/g;\n\n  if (usernamereg.test(str)) {\n    return undefined;\n  }\n\n  // user\n  const userreg = /\\/user\\/(?!.*videos)/g;\n\n  if (userreg.test(str)) {\n    const elements = str.split('/');\n    return stripParameters(elements.pop());\n  }\n\n  // attribution_link\n  const attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n  if (attrreg.test(str)) {\n    return stripParameters(str.match(attrreg)[1]);\n  }\n\n  return undefined;\n}\n","/**\n * Get the vimeo id.\n * @param {string} vimeoStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function vimeo(vimeoStr) {\n  let str = vimeoStr;\n\n  if (str.indexOf('#') > -1) {\n    [str] = str.split('#');\n  }\n\n  if (str.indexOf('?') > -1 && str.indexOf('clip_id=') === -1) {\n    [str] = str.split('?');\n  }\n\n  let id;\n  let arr;\n\n  const primary = /https?:\\/\\/vimeo\\.com\\/([0-9]+)/;\n\n  const matches = primary.exec(str);\n  if (matches && matches[1]) {\n    return matches[1];\n  }\n\n  const vimeoPipe = [\n    'https?://player.vimeo.com/video/[0-9]+$',\n    'https?://vimeo.com/channels',\n    'groups',\n    'album',\n  ].join('|');\n\n  const vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n  if (vimeoRegex.test(str)) {\n    arr = str.split('/');\n    if (arr && arr.length) {\n      id = arr.pop();\n    }\n  } else if (/clip_id=/gim.test(str)) {\n    arr = str.split('clip_id=');\n    if (arr && arr.length) {\n      [id] = arr[1].split('&');\n    }\n  }\n\n  return id;\n}\n","/**\n * Get the vine id.\n * @param {string} str - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function vine(str) {\n  const regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z0-9]*)\\/?/;\n  const matches = regex.exec(str);\n  return matches && matches[1];\n}\n","/**\n * Get the VideoPress id.\n * @param {string} str - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function videopress(str) {\n  let idRegex;\n\n  if (str.indexOf('embed') > -1) {\n    idRegex = /embed\\/(\\w{8})/;\n    return str.match(idRegex)[1];\n  }\n\n  idRegex = /\\/v\\/(\\w{8})/;\n\n  const match = str.match(idRegex);\n\n  if (match && match.length > 0) {\n    return str.match(idRegex)[1];\n  }\n\n  return undefined;\n}\n","/**\n * Get the Microsoft Stream id.\n * @param {string} str - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function microsoftStream(str) {\n  const regex = (str.indexOf('embed') > -1)\n    ? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z0-9-]*)\\/?/\n    : /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z0-9-]*)\\/?/;\n  const matches = regex.exec(str);\n  return matches && matches[1];\n}\n","import getSrc from 'get-src';\nimport youtube from './youtube';\nimport vimeo from './vimeo';\nimport vine from './vine';\nimport videopress from './videopress';\nimport microsoftStream from './microsoftstream';\n\n/**\n * Get the id and service from a video url.\n * @param {String} videoStr - the url from which you want to extract the id\n * @returns {Object}\n */\nfunction getVideoId(videoStr) {\n  if (typeof videoStr !== 'string') {\n    throw new TypeError('get-video-id expects a string');\n  }\n\n  let str = videoStr;\n\n  if (/<iframe/gi.test(str)) {\n    str = getSrc(str);\n  }\n\n  // remove surrounding whitespaces or linefeeds\n  str = str.trim();\n\n  // remove the '-nocookie' flag from youtube urls\n  str = str.replace('-nocookie', '');\n\n  // remove any leading `www.`\n  str = str.replace('/www.', '/');\n\n  let metadata = {\n    id: null,\n    service: null,\n  };\n\n  // Try to handle google redirection uri\n  if (/\\/\\/google/.test(str)) {\n    // Find the redirection uri\n    const matches = str.match(/url=([^&]+)&/);\n\n    // Decode the found uri and replace current url string - continue with final link\n    if (matches) {\n      // JavaScript can get encoded URI\n      str = decodeURIComponent(matches[1]);\n    }\n  }\n\n  if (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(str)) {\n    metadata = {\n      id: youtube(str),\n      service: 'youtube',\n    };\n  } else if (/vimeo/.test(str)) {\n    metadata = {\n      id: vimeo(str),\n      service: 'vimeo',\n    };\n  } else if (/vine/.test(str)) {\n    metadata = {\n      id: vine(str),\n      service: 'vine',\n    };\n  } else if (/videopress/.test(str)) {\n    metadata = {\n      id: videopress(str),\n      service: 'videopress',\n    };\n  } else if (/microsoftstream/.test(str)) {\n    metadata = {\n      id: microsoftStream(str),\n      service: 'microsoftstream',\n    };\n  }\n  return metadata;\n}\n\nexport default getVideoId;\n"],"names":["input","TypeError","url","exec","length","stripParameters","str","indexOf","split","youtube","youtubeStr","replace","shortcode","test","inlinev","parameterv","parameterwebp","embedreg","pop","attrreg","match","vimeo","vimeoStr","id","arr","matches","vimeoPipe","join","RegExp","vine","videopress","idRegex","microsoftStream","videoStr","getSrc","trim","metadata","service","decodeURIComponent"],"mappings":"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"}